import streamlit as st
from atproto import Client
import datetime
import traceback
from langchain_community.tools import DuckDuckGoSearchRun
from langgraph.prebuilt import create_react_agent
from langchain_ollama import ChatOllama
from langchain_core.tools import tool
from langchain_core.messages import ToolMessage, HumanMessage, AIMessage
import os
os.environ["TOKENIZERS_PARALLELISM"] = "false"

llm = ChatOllama(model="llama3.2")
 
@tool
def web_search(query: str) -> str:
    """Effectuer une recherche WEB.
    
    Args:
        query: The query to search for.
    """
    duckduckgo_search = DuckDuckGoSearchRun()
    return duckduckgo_search.run(query)

web_search_agent = create_react_agent(
    llm,
    tools=[web_search],
    prompt="""
Tu es un assistant intelligent sp√©cialis√© dans la d√©tection de fausses informations (fake news).
Ton r√¥le est d‚Äôanalyser un post et de d√©terminer si son contenu est cr√©dible, trompeur ou manifestement faux.

Pour cela, tu peux utiliser l‚Äôoutil `web_search` qui te permet d‚Äôeffectuer des recherches sur le Web afin de v√©rifier les faits, trouver des sources fiables, ou confirmer l'existence d'√©v√©nements ou de d√©clarations. Utilise cet outil chaque fois que tu as un doute ou qu‚Äôun √©nonc√© semble suspect.

Voici les √©l√©ments que tu dois surveiller :
- Langage sensationnaliste ou alarmiste, abus de majuscules ou ponctuation excessive.
- Fautes d‚Äôorthographe importantes qui peuvent trahir un manque de professionnalisme.
- Affirmations extraordinaires sans preuves ou sans mention de sources officielles.
- Th√®mes conspirationnistes, pseudoscientifiques ou √† vis√©e manipulatrice.
- Absence totale de trace dans les m√©dias fiables ou les bases de donn√©es publiques.

Structure attendue de ta r√©ponse :
1. Une **analyse critique du contenu**, en expliquant ce qui soul√®ve des doutes ou au contraire ce qui semble plausible.
2. Un r√©sum√© de ce que tu as trouv√© via la recherche Web (si utilis√©e).
3. Un **verdict final** clair parmi :  VRAI / FAUX / NON V√âRIFIABLE

Exemples :

üîπ Exemple 1 :
Post : "Donald Trump va rouvrir la prison d'Alcatraz pour y enfermer les pires criminels d√©mocrates."
‚Üí Analyse : Cette affirmation est sensationnaliste et aucune d√©claration officielle ou source fiable n‚Äôen parle.
‚Üí Recherche : Aucune trace de cette annonce sur les sites d‚Äôactualit√©s s√©rieux.
‚Üí Verdict : NON V√âRIFIABLE

üîπ Exemple 2 :
Post : "Le vaccin contre la grippe contient des puces 5G pour contr√¥ler la population."
‚Üí Analyse : Il s'agit d'une th√©orie conspirationniste r√©pandue mais scientifiquement infond√©e.
‚Üí Recherche : Toutes les sources fiables (OMS, CDC, etc.) d√©mentent cette affirmation.
‚Üí Verdict : FAUX

üîπ Exemple 3 :
Post : "Une m√©t√©orite de la taille de Paris va frapper la Terre demain."
‚Üí Analyse : L'affirmation est extr√™mement grave et devrait √™tre confirm√©e par des agences spatiales.
‚Üí Recherche : Aucune alerte de la NASA ou autre source scientifique.
‚Üí Verdict : FAUX

üîπ Exemple 4 :
Post : "Une nouvelle souche de COVID a √©t√© d√©couverte en Chine."
‚Üí Analyse : Cette affirmation est plausible mais n√©cessite une v√©rification.
‚Üí Recherche : Recherche en cours ou donn√©e r√©cente non encore relay√©e.
‚Üí Verdict : NON V√âRIFIABLE

Sois critique, m√©thodique et objectif. V√©rifie toujours avant de conclure.
"""
)

st.set_page_config(page_title="Bluesky Post Viewer", layout="centered")
st.title("üîé Dernier post public Bluesky d‚Äôun utilisateur")
 
# √Ä s√©curiser dans secrets ou .env
BLSKY_IDENTIFIER = "trou2balle.bsky.social"
BLSKY_PASSWORD = "qebguk-vudhy5-gAxzer"
 
username = st.text_input("Nom d'utilisateur Bluesky (ex : thomas.bsky.social)")
 
if username:
    try:
        client = Client()
        client.login(BLSKY_IDENTIFIER, BLSKY_PASSWORD)
 
        profile = client.app.bsky.actor.get_profile({'actor': username})
        feed = client.app.bsky.feed.get_author_feed({'actor': username, 'limit': 1})
 
        if feed.feed:
            post = feed.feed[0].post
            post_text = post.record.text
 
            # ‚úÖ Conversion en datetime
            try:
                post_time_str = post.record.created_at
                post_time = datetime.datetime.fromisoformat(post_time_str.replace("Z", "+00:00"))
                post_time_fmt = post_time.strftime('%d %B %Y, %H:%M')
            except Exception:
                post_time_fmt = "Date inconnue"
 
            st.markdown(f"""
                <div style="border:1px solid #ccc; border-radius:10px; padding:10px;">
                    <div style="display:flex; align-items:center;">
                        <img src="{profile.avatar}" style="border-radius:50%; width:48px; height:48px; margin-right:10px;">
                        <div>
                            <strong>{profile.display_name}</strong> <br>
                            <span style="color:gray">@{profile.handle} ¬∑ {post_time_fmt}</span>
                        </div>
                    </div>
                    <p style="margin-top:10px; font-size:16px;">{post_text}</p>
                </div>
            """, unsafe_allow_html=True)
            query = f"Est-ce que ce post est une fake news : \"{post_text}\" ?"
            web_search_result = web_search_agent.invoke({"messages": [HumanMessage(content=query)]})

            # Afficher la r√©ponse du mod√®le
            st.subheader("üß† Analyse par l'assistant IA")
            st.markdown(f"""
            <div style="border:1px solid #333; border-radius:10px; padding:10px; background-color:#000000;">
                <p style="font-size:16px; color:#ffffff;">{web_search_result["messages"][-1].content}</p>
            </div>
        """, unsafe_allow_html=True)
        else:
            st.warning("Aucun post trouv√©.")
 
    except Exception as e:
        st.error("Une erreur est survenue.")
        st.text(traceback.format_exc())
