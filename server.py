from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from langchain_community.tools import DuckDuckGoSearchRun
from langgraph.prebuilt import create_react_agent
from langchain_ollama import ChatOllama
from langchain_core.messages import HumanMessage
import os

os.environ["TOKENIZERS_PARALLELISM"] = "false"

app = FastAPI()

# CORS : autoriser tout (en dev)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# Initialise LLM Ollama
llm = ChatOllama(model="llama3.2")

# Outil de recherche web DuckDuckGo (outil LangChain)
duckduckgo_search = DuckDuckGoSearchRun()

# Prompt personnalis√© (contexte)
prompt_context = """
Tu es un assistant intelligent sp√©cialis√© dans la d√©tection de fausses informations (fake news).
Ton r√¥le est d'analyser un post et de d√©terminer si son contenu est cr√©dible, trompeur ou manifestement faux.

Pour cela, tu peux utiliser l'outil `web_search` qui te permet d'effectuer des recherches sur le Web afin de v√©rifier les faits, trouver des sources fiables, ou confirmer l'existence d'√©v√©nements ou de d√©clarations. Utilise cet outil chaque fois que tu as un doute ou qu'un √©nonc√© semble suspect.

Voici les √©l√©ments que tu dois surveiller :
- Langage sensationnaliste ou alarmiste, abus de majuscules ou ponctuation excessive.
- Fautes d'orthographe importantes qui peuvent trahir un manque de professionnalisme.
- Affirmations extraordinaires sans preuves ou sans mention de sources officielles.
- Th√®mes conspirationnistes, pseudoscientifiques ou √† vis√©e manipulatrice.
- Absence totale de trace dans les m√©dias fiables ou les bases de donn√©es publiques.

Structure attendue de ta r√©ponse :
1. Une **analyse critique du contenu**, en expliquant ce qui soul√®ve des doutes ou au contraire ce qui semble plausible.
2. Un r√©sum√© de ce que tu as trouv√© via la recherche Web (si utilis√©e).
3. Un **verdict final** clair parmi :  VRAI / FAKE NEWS / NON V√âRIFIABLE

Exemples :

üîπ Exemple 1 :
Post : "Donald Trump va rouvrir la prison d'Alcatraz pour y enfermer les pires criminels d√©mocrates."
‚Üí Analyse : Cette affirmation est sensationnaliste et aucune d√©claration officielle ou source fiable n'en parle.
‚Üí Recherche : Aucune trace de cette annonce sur les sites d'actualit√©s s√©rieux.
‚Üí Verdict : NON V√âRIFIABLE

üîπ Exemple 2 :
Post : "Le vaccin contre la grippe contient des puces 5G pour contr√¥ler la population."
‚Üí Analyse : Il s'agit d'une th√©orie conspirationniste r√©pandue mais scientifiquement infond√©e.
‚Üí Recherche : Toutes les sources fiables (OMS, CDC, etc.) d√©mentent cette affirmation.
‚Üí Verdict : FAUX

üîπ Exemple 3 :
Post : "Une m√©t√©orite de la taille de Paris va frapper la Terre demain."
‚Üí Analyse : L'affirmation est extr√™mement grave et devrait √™tre confirm√©e par des agences spatiales.
‚Üí Recherche : Aucune alerte de la NASA ou autre source scientifique.
‚Üí Verdict : FAUX

üîπ Exemple 4 :
Post : "Une nouvelle souche de COVID a √©t√© d√©couverte en Chine."
‚Üí Analyse : Cette affirmation est plausible mais n√©cessite une v√©rification.
‚Üí Recherche : Recherche en cours ou donn√©e r√©cente non encore relay√©e.
‚Üí Verdict : NON V√âRIFIABLE

Sois critique, m√©thodique et objectif. V√©rifie toujours avant de conclure.
"""

# Cr√©ation de l'agent React avec LLM, outil et prompt
web_search_agent = create_react_agent(
    llm,
    tools=[duckduckgo_search],
    prompt=prompt_context
)

# Mod√®le Pydantic pour requ√™te POST
class PostRequest(BaseModel):
    post_text: str

# Route POST pour analyser un texte
@app.post("/check_fake_news")
async def check_fake_news(req: PostRequest):
    query = f"Est-ce que ce post est une fake news : \"{req.post_text}\" ?"
    result = web_search_agent.invoke({"messages": [HumanMessage(content=query)]})
    return {"analysis": result["messages"][-1].content}
